//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/Input/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Player_Run"",
            ""id"": ""9958b276-df43-48e9-838a-be997d1b2936"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d1e68e63-2bd4-4b5c-828c-ade2a5edddc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""490cf779-1f92-478c-8a70-74f3bd488ec6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchPower"",
                    ""type"": ""Button"",
                    ""id"": ""6335bee4-9303-440a-97d5-dd7ae76c1280"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""44f10dd3-18be-4b23-8bcc-67ee6df2be30"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""69013573-4ecd-4a5f-a811-f8222ab68f07"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aea34cda-6ea2-49b1-b1a4-f4d52474ca0b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f62c9038-9c01-4019-86d0-34acb39ccda3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6b18fe78-9eed-49a0-b8b2-38ae4ca47523"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8d62c176-32e1-4dfb-8a31-8917d3808757"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Run
        m_Player_Run = asset.FindActionMap("Player_Run", throwIfNotFound: true);
        m_Player_Run_Jump = m_Player_Run.FindAction("Jump", throwIfNotFound: true);
        m_Player_Run_Movement = m_Player_Run.FindAction("Movement", throwIfNotFound: true);
        m_Player_Run_SwitchPower = m_Player_Run.FindAction("SwitchPower", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Run
    private readonly InputActionMap m_Player_Run;
    private List<IPlayer_RunActions> m_Player_RunActionsCallbackInterfaces = new List<IPlayer_RunActions>();
    private readonly InputAction m_Player_Run_Jump;
    private readonly InputAction m_Player_Run_Movement;
    private readonly InputAction m_Player_Run_SwitchPower;
    public struct Player_RunActions
    {
        private @InputManager m_Wrapper;
        public Player_RunActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Run_Jump;
        public InputAction @Movement => m_Wrapper.m_Player_Run_Movement;
        public InputAction @SwitchPower => m_Wrapper.m_Player_Run_SwitchPower;
        public InputActionMap Get() { return m_Wrapper.m_Player_Run; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_RunActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_RunActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_RunActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_RunActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @SwitchPower.started += instance.OnSwitchPower;
            @SwitchPower.performed += instance.OnSwitchPower;
            @SwitchPower.canceled += instance.OnSwitchPower;
        }

        private void UnregisterCallbacks(IPlayer_RunActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @SwitchPower.started -= instance.OnSwitchPower;
            @SwitchPower.performed -= instance.OnSwitchPower;
            @SwitchPower.canceled -= instance.OnSwitchPower;
        }

        public void RemoveCallbacks(IPlayer_RunActions instance)
        {
            if (m_Wrapper.m_Player_RunActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_RunActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_RunActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_RunActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_RunActions @Player_Run => new Player_RunActions(this);
    public interface IPlayer_RunActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnSwitchPower(InputAction.CallbackContext context);
    }
}
